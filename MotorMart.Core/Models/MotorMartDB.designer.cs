#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MotorMart.Core.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MotorMart")]
	public partial class MotorMartDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertvehicleimage(vehicleimage instance);
    partial void Updatevehicleimage(vehicleimage instance);
    partial void Deletevehicleimage(vehicleimage instance);
    partial void Insertdimension(dimension instance);
    partial void Updatedimension(dimension instance);
    partial void Deletedimension(dimension instance);
    partial void Insertperformance(performance instance);
    partial void Updateperformance(performance instance);
    partial void Deleteperformance(performance instance);
    partial void Insertsafetydetail(safetydetail instance);
    partial void Updatesafetydetail(safetydetail instance);
    partial void Deletesafetydetail(safetydetail instance);
    partial void Insertstaticcontent(staticcontent instance);
    partial void Updatestaticcontent(staticcontent instance);
    partial void Deletestaticcontent(staticcontent instance);
    partial void Insertusergroup(usergroup instance);
    partial void Updateusergroup(usergroup instance);
    partial void Deleteusergroup(usergroup instance);
    partial void Insertapplicationsetting(applicationsetting instance);
    partial void Updateapplicationsetting(applicationsetting instance);
    partial void Deleteapplicationsetting(applicationsetting instance);
    partial void Insertsitemap(sitemap instance);
    partial void Updatesitemap(sitemap instance);
    partial void Deletesitemap(sitemap instance);
    partial void Insertcolor(color instance);
    partial void Updatecolor(color instance);
    partial void Deletecolor(color instance);
    partial void Insertbodytype(bodytype instance);
    partial void Updatebodytype(bodytype instance);
    partial void Deletebodytype(bodytype instance);
    partial void Insertfueltype(fueltype instance);
    partial void Updatefueltype(fueltype instance);
    partial void Deletefueltype(fueltype instance);
    partial void Inserttransmission(transmission instance);
    partial void Updatetransmission(transmission instance);
    partial void Deletetransmission(transmission instance);
    partial void Insertmodel(model instance);
    partial void Updatemodel(model instance);
    partial void Deletemodel(model instance);
    partial void Insertmake(make instance);
    partial void Updatemake(make instance);
    partial void Deletemake(make instance);
    partial void Insertfeature(feature instance);
    partial void Updatefeature(feature instance);
    partial void Deletefeature(feature instance);
    partial void Insertvehicle(vehicle instance);
    partial void Updatevehicle(vehicle instance);
    partial void Deletevehicle(vehicle instance);
    partial void Insertdealer(dealer instance);
    partial void Updatedealer(dealer instance);
    partial void Deletedealer(dealer instance);
    partial void Insertcountry(country instance);
    partial void Updatecountry(country instance);
    partial void Deletecountry(country instance);
    partial void Insertgeolookup(geolookup instance);
    partial void Updategeolookup(geolookup instance);
    partial void Deletegeolookup(geolookup instance);
    partial void Insertsearchtray(searchtray instance);
    partial void Updatesearchtray(searchtray instance);
    partial void Deletesearchtray(searchtray instance);
    partial void Insertuserenquiry(userenquiry instance);
    partial void Updateuserenquiry(userenquiry instance);
    partial void Deleteuserenquiry(userenquiry instance);
    partial void Insertuseraccount(useraccount instance);
    partial void Updateuseraccount(useraccount instance);
    partial void Deleteuseraccount(useraccount instance);
    partial void Insertsmscarrier(smscarrier instance);
    partial void Updatesmscarrier(smscarrier instance);
    partial void Deletesmscarrier(smscarrier instance);
    #endregion
		
		public MotorMartDBDataContext() : 
				base(global::MotorMart.Core.Properties.Settings.Default.MotorMartConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MotorMartDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MotorMartDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MotorMartDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MotorMartDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<vehicleimage> vehicleimages
		{
			get
			{
				return this.GetTable<vehicleimage>();
			}
		}
		
		public System.Data.Linq.Table<dimension> dimensions
		{
			get
			{
				return this.GetTable<dimension>();
			}
		}
		
		public System.Data.Linq.Table<performance> performances
		{
			get
			{
				return this.GetTable<performance>();
			}
		}
		
		public System.Data.Linq.Table<safetydetail> safetydetails
		{
			get
			{
				return this.GetTable<safetydetail>();
			}
		}
		
		public System.Data.Linq.Table<staticcontent> staticcontents
		{
			get
			{
				return this.GetTable<staticcontent>();
			}
		}
		
		public System.Data.Linq.Table<usergroup> usergroups
		{
			get
			{
				return this.GetTable<usergroup>();
			}
		}
		
		public System.Data.Linq.Table<applicationsetting> applicationsettings
		{
			get
			{
				return this.GetTable<applicationsetting>();
			}
		}
		
		public System.Data.Linq.Table<sitemap> sitemaps
		{
			get
			{
				return this.GetTable<sitemap>();
			}
		}
		
		public System.Data.Linq.Table<color> colors
		{
			get
			{
				return this.GetTable<color>();
			}
		}
		
		public System.Data.Linq.Table<bodytype> bodytypes
		{
			get
			{
				return this.GetTable<bodytype>();
			}
		}
		
		public System.Data.Linq.Table<fueltype> fueltypes
		{
			get
			{
				return this.GetTable<fueltype>();
			}
		}
		
		public System.Data.Linq.Table<transmission> transmissions
		{
			get
			{
				return this.GetTable<transmission>();
			}
		}
		
		public System.Data.Linq.Table<model> models
		{
			get
			{
				return this.GetTable<model>();
			}
		}
		
		public System.Data.Linq.Table<make> makes
		{
			get
			{
				return this.GetTable<make>();
			}
		}
		
		public System.Data.Linq.Table<feature> features
		{
			get
			{
				return this.GetTable<feature>();
			}
		}
		
		public System.Data.Linq.Table<vehicle> vehicles
		{
			get
			{
				return this.GetTable<vehicle>();
			}
		}
		
		public System.Data.Linq.Table<dealer> dealers
		{
			get
			{
				return this.GetTable<dealer>();
			}
		}
		
		public System.Data.Linq.Table<country> countries
		{
			get
			{
				return this.GetTable<country>();
			}
		}
		
		public System.Data.Linq.Table<geolookup> geolookups
		{
			get
			{
				return this.GetTable<geolookup>();
			}
		}
		
		public System.Data.Linq.Table<searchtray> searchtrays
		{
			get
			{
				return this.GetTable<searchtray>();
			}
		}
		
		public System.Data.Linq.Table<userenquiry> userenquiries
		{
			get
			{
				return this.GetTable<userenquiry>();
			}
		}
		
		public System.Data.Linq.Table<useraccount> useraccounts
		{
			get
			{
				return this.GetTable<useraccount>();
			}
		}
		
		public System.Data.Linq.Table<smscarrier> smscarriers
		{
			get
			{
				return this.GetTable<smscarrier>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vehicleimage")]
	public partial class vehicleimage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _vehicleimageid;
		
		private int _vehicleid;
		
		private string _filename;
		
		private string _caption;
		
		private int _sortorder;
		
		private EntityRef<vehicle> _vehicle;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvehicleimageidChanging(int value);
    partial void OnvehicleimageidChanged();
    partial void OnvehicleidChanging(int value);
    partial void OnvehicleidChanged();
    partial void OnfilenameChanging(string value);
    partial void OnfilenameChanged();
    partial void OncaptionChanging(string value);
    partial void OncaptionChanged();
    partial void OnsortorderChanging(int value);
    partial void OnsortorderChanged();
    #endregion
		
		public vehicleimage()
		{
			this._vehicle = default(EntityRef<vehicle>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vehicleimageid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int vehicleimageid
		{
			get
			{
				return this._vehicleimageid;
			}
			set
			{
				if ((this._vehicleimageid != value))
				{
					this.OnvehicleimageidChanging(value);
					this.SendPropertyChanging();
					this._vehicleimageid = value;
					this.SendPropertyChanged("vehicleimageid");
					this.OnvehicleimageidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vehicleid", DbType="Int NOT NULL")]
		public int vehicleid
		{
			get
			{
				return this._vehicleid;
			}
			set
			{
				if ((this._vehicleid != value))
				{
					if (this._vehicle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvehicleidChanging(value);
					this.SendPropertyChanging();
					this._vehicleid = value;
					this.SendPropertyChanged("vehicleid");
					this.OnvehicleidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_filename", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string filename
		{
			get
			{
				return this._filename;
			}
			set
			{
				if ((this._filename != value))
				{
					this.OnfilenameChanging(value);
					this.SendPropertyChanging();
					this._filename = value;
					this.SendPropertyChanged("filename");
					this.OnfilenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_caption", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string caption
		{
			get
			{
				return this._caption;
			}
			set
			{
				if ((this._caption != value))
				{
					this.OncaptionChanging(value);
					this.SendPropertyChanging();
					this._caption = value;
					this.SendPropertyChanged("caption");
					this.OncaptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sortorder", DbType="Int NOT NULL")]
		public int sortorder
		{
			get
			{
				return this._sortorder;
			}
			set
			{
				if ((this._sortorder != value))
				{
					this.OnsortorderChanging(value);
					this.SendPropertyChanging();
					this._sortorder = value;
					this.SendPropertyChanged("sortorder");
					this.OnsortorderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vehicle_vehicleimage", Storage="_vehicle", ThisKey="vehicleid", OtherKey="vehicleid", IsForeignKey=true)]
		public vehicle vehicle
		{
			get
			{
				return this._vehicle.Entity;
			}
			set
			{
				vehicle previousValue = this._vehicle.Entity;
				if (((previousValue != value) 
							|| (this._vehicle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._vehicle.Entity = null;
						previousValue.vehicleimages.Remove(this);
					}
					this._vehicle.Entity = value;
					if ((value != null))
					{
						value.vehicleimages.Add(this);
						this._vehicleid = value.vehicleid;
					}
					else
					{
						this._vehicleid = default(int);
					}
					this.SendPropertyChanged("vehicle");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dimensions")]
	public partial class dimension : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _dimensionsid;
		
		private System.Nullable<decimal> _height;
		
		private System.Nullable<decimal> _wheelbase;
		
		private System.Nullable<decimal> _width;
		
		private System.Nullable<decimal> _widthincludingmirrors;
		
		private System.Nullable<decimal> _fueltankcapacity;
		
		private System.Nullable<decimal> _grossvehicleweight;
		
		private System.Nullable<decimal> _luggagecapacitywithseatsdown;
		
		private System.Nullable<decimal> _luggagecapacitywithseatsup;
		
		private System.Nullable<decimal> _maxloadingweight;
		
		private System.Nullable<decimal> _maxroofload;
		
		private System.Nullable<decimal> _maxtowingweightbraked;
		
		private System.Nullable<decimal> _maxtowingweightunbraked;
		
		private System.Nullable<decimal> _minkerbweight;
		
		private System.Nullable<decimal> _kerbtokerbturningcircle;
		
		private EntitySet<vehicle> _vehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndimensionsidChanging(int value);
    partial void OndimensionsidChanged();
    partial void OnheightChanging(System.Nullable<decimal> value);
    partial void OnheightChanged();
    partial void OnwheelbaseChanging(System.Nullable<decimal> value);
    partial void OnwheelbaseChanged();
    partial void OnwidthChanging(System.Nullable<decimal> value);
    partial void OnwidthChanged();
    partial void OnwidthincludingmirrorsChanging(System.Nullable<decimal> value);
    partial void OnwidthincludingmirrorsChanged();
    partial void OnfueltankcapacityChanging(System.Nullable<decimal> value);
    partial void OnfueltankcapacityChanged();
    partial void OngrossvehicleweightChanging(System.Nullable<decimal> value);
    partial void OngrossvehicleweightChanged();
    partial void OnluggagecapacitywithseatsdownChanging(System.Nullable<decimal> value);
    partial void OnluggagecapacitywithseatsdownChanged();
    partial void OnluggagecapacitywithseatsupChanging(System.Nullable<decimal> value);
    partial void OnluggagecapacitywithseatsupChanged();
    partial void OnmaxloadingweightChanging(System.Nullable<decimal> value);
    partial void OnmaxloadingweightChanged();
    partial void OnmaxroofloadChanging(System.Nullable<decimal> value);
    partial void OnmaxroofloadChanged();
    partial void OnmaxtowingweightbrakedChanging(System.Nullable<decimal> value);
    partial void OnmaxtowingweightbrakedChanged();
    partial void OnmaxtowingweightunbrakedChanging(System.Nullable<decimal> value);
    partial void OnmaxtowingweightunbrakedChanged();
    partial void OnminkerbweightChanging(System.Nullable<decimal> value);
    partial void OnminkerbweightChanged();
    partial void OnkerbtokerbturningcircleChanging(System.Nullable<decimal> value);
    partial void OnkerbtokerbturningcircleChanged();
    #endregion
		
		public dimension()
		{
			this._vehicles = new EntitySet<vehicle>(new Action<vehicle>(this.attach_vehicles), new Action<vehicle>(this.detach_vehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dimensionsid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int dimensionsid
		{
			get
			{
				return this._dimensionsid;
			}
			set
			{
				if ((this._dimensionsid != value))
				{
					this.OndimensionsidChanging(value);
					this.SendPropertyChanging();
					this._dimensionsid = value;
					this.SendPropertyChanged("dimensionsid");
					this.OndimensionsidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_height", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> height
		{
			get
			{
				return this._height;
			}
			set
			{
				if ((this._height != value))
				{
					this.OnheightChanging(value);
					this.SendPropertyChanging();
					this._height = value;
					this.SendPropertyChanged("height");
					this.OnheightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_wheelbase", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> wheelbase
		{
			get
			{
				return this._wheelbase;
			}
			set
			{
				if ((this._wheelbase != value))
				{
					this.OnwheelbaseChanging(value);
					this.SendPropertyChanging();
					this._wheelbase = value;
					this.SendPropertyChanged("wheelbase");
					this.OnwheelbaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_width", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> width
		{
			get
			{
				return this._width;
			}
			set
			{
				if ((this._width != value))
				{
					this.OnwidthChanging(value);
					this.SendPropertyChanging();
					this._width = value;
					this.SendPropertyChanged("width");
					this.OnwidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_widthincludingmirrors", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> widthincludingmirrors
		{
			get
			{
				return this._widthincludingmirrors;
			}
			set
			{
				if ((this._widthincludingmirrors != value))
				{
					this.OnwidthincludingmirrorsChanging(value);
					this.SendPropertyChanging();
					this._widthincludingmirrors = value;
					this.SendPropertyChanged("widthincludingmirrors");
					this.OnwidthincludingmirrorsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fueltankcapacity", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> fueltankcapacity
		{
			get
			{
				return this._fueltankcapacity;
			}
			set
			{
				if ((this._fueltankcapacity != value))
				{
					this.OnfueltankcapacityChanging(value);
					this.SendPropertyChanging();
					this._fueltankcapacity = value;
					this.SendPropertyChanged("fueltankcapacity");
					this.OnfueltankcapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_grossvehicleweight", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> grossvehicleweight
		{
			get
			{
				return this._grossvehicleweight;
			}
			set
			{
				if ((this._grossvehicleweight != value))
				{
					this.OngrossvehicleweightChanging(value);
					this.SendPropertyChanging();
					this._grossvehicleweight = value;
					this.SendPropertyChanged("grossvehicleweight");
					this.OngrossvehicleweightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_luggagecapacitywithseatsdown", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> luggagecapacitywithseatsdown
		{
			get
			{
				return this._luggagecapacitywithseatsdown;
			}
			set
			{
				if ((this._luggagecapacitywithseatsdown != value))
				{
					this.OnluggagecapacitywithseatsdownChanging(value);
					this.SendPropertyChanging();
					this._luggagecapacitywithseatsdown = value;
					this.SendPropertyChanged("luggagecapacitywithseatsdown");
					this.OnluggagecapacitywithseatsdownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_luggagecapacitywithseatsup", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> luggagecapacitywithseatsup
		{
			get
			{
				return this._luggagecapacitywithseatsup;
			}
			set
			{
				if ((this._luggagecapacitywithseatsup != value))
				{
					this.OnluggagecapacitywithseatsupChanging(value);
					this.SendPropertyChanging();
					this._luggagecapacitywithseatsup = value;
					this.SendPropertyChanged("luggagecapacitywithseatsup");
					this.OnluggagecapacitywithseatsupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maxloadingweight", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> maxloadingweight
		{
			get
			{
				return this._maxloadingweight;
			}
			set
			{
				if ((this._maxloadingweight != value))
				{
					this.OnmaxloadingweightChanging(value);
					this.SendPropertyChanging();
					this._maxloadingweight = value;
					this.SendPropertyChanged("maxloadingweight");
					this.OnmaxloadingweightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maxroofload", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> maxroofload
		{
			get
			{
				return this._maxroofload;
			}
			set
			{
				if ((this._maxroofload != value))
				{
					this.OnmaxroofloadChanging(value);
					this.SendPropertyChanging();
					this._maxroofload = value;
					this.SendPropertyChanged("maxroofload");
					this.OnmaxroofloadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maxtowingweightbraked", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> maxtowingweightbraked
		{
			get
			{
				return this._maxtowingweightbraked;
			}
			set
			{
				if ((this._maxtowingweightbraked != value))
				{
					this.OnmaxtowingweightbrakedChanging(value);
					this.SendPropertyChanging();
					this._maxtowingweightbraked = value;
					this.SendPropertyChanged("maxtowingweightbraked");
					this.OnmaxtowingweightbrakedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maxtowingweightunbraked", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> maxtowingweightunbraked
		{
			get
			{
				return this._maxtowingweightunbraked;
			}
			set
			{
				if ((this._maxtowingweightunbraked != value))
				{
					this.OnmaxtowingweightunbrakedChanging(value);
					this.SendPropertyChanging();
					this._maxtowingweightunbraked = value;
					this.SendPropertyChanged("maxtowingweightunbraked");
					this.OnmaxtowingweightunbrakedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_minkerbweight", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> minkerbweight
		{
			get
			{
				return this._minkerbweight;
			}
			set
			{
				if ((this._minkerbweight != value))
				{
					this.OnminkerbweightChanging(value);
					this.SendPropertyChanging();
					this._minkerbweight = value;
					this.SendPropertyChanged("minkerbweight");
					this.OnminkerbweightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_kerbtokerbturningcircle", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> kerbtokerbturningcircle
		{
			get
			{
				return this._kerbtokerbturningcircle;
			}
			set
			{
				if ((this._kerbtokerbturningcircle != value))
				{
					this.OnkerbtokerbturningcircleChanging(value);
					this.SendPropertyChanging();
					this._kerbtokerbturningcircle = value;
					this.SendPropertyChanged("kerbtokerbturningcircle");
					this.OnkerbtokerbturningcircleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dimension_vehicle", Storage="_vehicles", ThisKey="dimensionsid", OtherKey="dimensionsid")]
		public EntitySet<vehicle> vehicles
		{
			get
			{
				return this._vehicles;
			}
			set
			{
				this._vehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_vehicles(vehicle entity)
		{
			this.SendPropertyChanging();
			entity.dimension = this;
		}
		
		private void detach_vehicles(vehicle entity)
		{
			this.SendPropertyChanging();
			entity.dimension = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.performance")]
	public partial class performance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _performanceid;
		
		private System.Nullable<decimal> _urbanfuelconsumption;
		
		private System.Nullable<decimal> _extraurbanfuelconsumption;
		
		private System.Nullable<decimal> _combinedfuelconsumption;
		
		private System.Nullable<decimal> _acceleration;
		
		private System.Nullable<int> _topspeed;
		
		private System.Nullable<int> _cylinders;
		
		private System.Nullable<int> _valves;
		
		private System.Nullable<int> _enginepower;
		
		private System.Nullable<int> _enginetorque;
		
		private EntitySet<vehicle> _vehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnperformanceidChanging(int value);
    partial void OnperformanceidChanged();
    partial void OnurbanfuelconsumptionChanging(System.Nullable<decimal> value);
    partial void OnurbanfuelconsumptionChanged();
    partial void OnextraurbanfuelconsumptionChanging(System.Nullable<decimal> value);
    partial void OnextraurbanfuelconsumptionChanged();
    partial void OncombinedfuelconsumptionChanging(System.Nullable<decimal> value);
    partial void OncombinedfuelconsumptionChanged();
    partial void OnaccelerationChanging(System.Nullable<decimal> value);
    partial void OnaccelerationChanged();
    partial void OntopspeedChanging(System.Nullable<int> value);
    partial void OntopspeedChanged();
    partial void OncylindersChanging(System.Nullable<int> value);
    partial void OncylindersChanged();
    partial void OnvalvesChanging(System.Nullable<int> value);
    partial void OnvalvesChanged();
    partial void OnenginepowerChanging(System.Nullable<int> value);
    partial void OnenginepowerChanged();
    partial void OnenginetorqueChanging(System.Nullable<int> value);
    partial void OnenginetorqueChanged();
    #endregion
		
		public performance()
		{
			this._vehicles = new EntitySet<vehicle>(new Action<vehicle>(this.attach_vehicles), new Action<vehicle>(this.detach_vehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_performanceid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int performanceid
		{
			get
			{
				return this._performanceid;
			}
			set
			{
				if ((this._performanceid != value))
				{
					this.OnperformanceidChanging(value);
					this.SendPropertyChanging();
					this._performanceid = value;
					this.SendPropertyChanged("performanceid");
					this.OnperformanceidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_urbanfuelconsumption", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> urbanfuelconsumption
		{
			get
			{
				return this._urbanfuelconsumption;
			}
			set
			{
				if ((this._urbanfuelconsumption != value))
				{
					this.OnurbanfuelconsumptionChanging(value);
					this.SendPropertyChanging();
					this._urbanfuelconsumption = value;
					this.SendPropertyChanged("urbanfuelconsumption");
					this.OnurbanfuelconsumptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_extraurbanfuelconsumption", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> extraurbanfuelconsumption
		{
			get
			{
				return this._extraurbanfuelconsumption;
			}
			set
			{
				if ((this._extraurbanfuelconsumption != value))
				{
					this.OnextraurbanfuelconsumptionChanging(value);
					this.SendPropertyChanging();
					this._extraurbanfuelconsumption = value;
					this.SendPropertyChanged("extraurbanfuelconsumption");
					this.OnextraurbanfuelconsumptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_combinedfuelconsumption", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> combinedfuelconsumption
		{
			get
			{
				return this._combinedfuelconsumption;
			}
			set
			{
				if ((this._combinedfuelconsumption != value))
				{
					this.OncombinedfuelconsumptionChanging(value);
					this.SendPropertyChanging();
					this._combinedfuelconsumption = value;
					this.SendPropertyChanged("combinedfuelconsumption");
					this.OncombinedfuelconsumptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_acceleration", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> acceleration
		{
			get
			{
				return this._acceleration;
			}
			set
			{
				if ((this._acceleration != value))
				{
					this.OnaccelerationChanging(value);
					this.SendPropertyChanging();
					this._acceleration = value;
					this.SendPropertyChanged("acceleration");
					this.OnaccelerationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_topspeed", DbType="Int")]
		public System.Nullable<int> topspeed
		{
			get
			{
				return this._topspeed;
			}
			set
			{
				if ((this._topspeed != value))
				{
					this.OntopspeedChanging(value);
					this.SendPropertyChanging();
					this._topspeed = value;
					this.SendPropertyChanged("topspeed");
					this.OntopspeedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cylinders", DbType="Int")]
		public System.Nullable<int> cylinders
		{
			get
			{
				return this._cylinders;
			}
			set
			{
				if ((this._cylinders != value))
				{
					this.OncylindersChanging(value);
					this.SendPropertyChanging();
					this._cylinders = value;
					this.SendPropertyChanged("cylinders");
					this.OncylindersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_valves", DbType="Int")]
		public System.Nullable<int> valves
		{
			get
			{
				return this._valves;
			}
			set
			{
				if ((this._valves != value))
				{
					this.OnvalvesChanging(value);
					this.SendPropertyChanging();
					this._valves = value;
					this.SendPropertyChanged("valves");
					this.OnvalvesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_enginepower", DbType="Int")]
		public System.Nullable<int> enginepower
		{
			get
			{
				return this._enginepower;
			}
			set
			{
				if ((this._enginepower != value))
				{
					this.OnenginepowerChanging(value);
					this.SendPropertyChanging();
					this._enginepower = value;
					this.SendPropertyChanged("enginepower");
					this.OnenginepowerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_enginetorque", DbType="Int")]
		public System.Nullable<int> enginetorque
		{
			get
			{
				return this._enginetorque;
			}
			set
			{
				if ((this._enginetorque != value))
				{
					this.OnenginetorqueChanging(value);
					this.SendPropertyChanging();
					this._enginetorque = value;
					this.SendPropertyChanged("enginetorque");
					this.OnenginetorqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="performance_vehicle", Storage="_vehicles", ThisKey="performanceid", OtherKey="performanceid")]
		public EntitySet<vehicle> vehicles
		{
			get
			{
				return this._vehicles;
			}
			set
			{
				this._vehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_vehicles(vehicle entity)
		{
			this.SendPropertyChanging();
			entity.performance = this;
		}
		
		private void detach_vehicles(vehicle entity)
		{
			this.SendPropertyChanging();
			entity.performance = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.safetydetails")]
	public partial class safetydetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _safetydetailsid;
		
		private string _details;
		
		private EntitySet<vehicle> _vehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsafetydetailsidChanging(int value);
    partial void OnsafetydetailsidChanged();
    partial void OndetailsChanging(string value);
    partial void OndetailsChanged();
    #endregion
		
		public safetydetail()
		{
			this._vehicles = new EntitySet<vehicle>(new Action<vehicle>(this.attach_vehicles), new Action<vehicle>(this.detach_vehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_safetydetailsid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int safetydetailsid
		{
			get
			{
				return this._safetydetailsid;
			}
			set
			{
				if ((this._safetydetailsid != value))
				{
					this.OnsafetydetailsidChanging(value);
					this.SendPropertyChanging();
					this._safetydetailsid = value;
					this.SendPropertyChanged("safetydetailsid");
					this.OnsafetydetailsidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_details", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string details
		{
			get
			{
				return this._details;
			}
			set
			{
				if ((this._details != value))
				{
					this.OndetailsChanging(value);
					this.SendPropertyChanging();
					this._details = value;
					this.SendPropertyChanged("details");
					this.OndetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="safetydetail_vehicle", Storage="_vehicles", ThisKey="safetydetailsid", OtherKey="safetydetailsid")]
		public EntitySet<vehicle> vehicles
		{
			get
			{
				return this._vehicles;
			}
			set
			{
				this._vehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_vehicles(vehicle entity)
		{
			this.SendPropertyChanging();
			entity.safetydetail = this;
		}
		
		private void detach_vehicles(vehicle entity)
		{
			this.SendPropertyChanging();
			entity.safetydetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.staticcontent")]
	public partial class staticcontent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _staticcontentid;
		
		private string _content;
		
		private EntitySet<sitemap> _sitemaps;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstaticcontentidChanging(int value);
    partial void OnstaticcontentidChanged();
    partial void OncontentChanging(string value);
    partial void OncontentChanged();
    #endregion
		
		public staticcontent()
		{
			this._sitemaps = new EntitySet<sitemap>(new Action<sitemap>(this.attach_sitemaps), new Action<sitemap>(this.detach_sitemaps));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staticcontentid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int staticcontentid
		{
			get
			{
				return this._staticcontentid;
			}
			set
			{
				if ((this._staticcontentid != value))
				{
					this.OnstaticcontentidChanging(value);
					this.SendPropertyChanging();
					this._staticcontentid = value;
					this.SendPropertyChanged("staticcontentid");
					this.OnstaticcontentidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string content
		{
			get
			{
				return this._content;
			}
			set
			{
				if ((this._content != value))
				{
					this.OncontentChanging(value);
					this.SendPropertyChanging();
					this._content = value;
					this.SendPropertyChanged("content");
					this.OncontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="staticcontent_sitemap", Storage="_sitemaps", ThisKey="staticcontentid", OtherKey="staticcontentid")]
		public EntitySet<sitemap> sitemaps
		{
			get
			{
				return this._sitemaps;
			}
			set
			{
				this._sitemaps.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_sitemaps(sitemap entity)
		{
			this.SendPropertyChanging();
			entity.staticcontent = this;
		}
		
		private void detach_sitemaps(sitemap entity)
		{
			this.SendPropertyChanging();
			entity.staticcontent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.usergroup")]
	public partial class usergroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _usergroupid;
		
		private string _name;
		
		private bool _isenabled;
		
		private EntitySet<useraccount> _useraccounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusergroupidChanging(int value);
    partial void OnusergroupidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnisenabledChanging(bool value);
    partial void OnisenabledChanged();
    #endregion
		
		public usergroup()
		{
			this._useraccounts = new EntitySet<useraccount>(new Action<useraccount>(this.attach_useraccounts), new Action<useraccount>(this.detach_useraccounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usergroupid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int usergroupid
		{
			get
			{
				return this._usergroupid;
			}
			set
			{
				if ((this._usergroupid != value))
				{
					this.OnusergroupidChanging(value);
					this.SendPropertyChanging();
					this._usergroupid = value;
					this.SendPropertyChanged("usergroupid");
					this.OnusergroupidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isenabled", DbType="Bit NOT NULL")]
		public bool isenabled
		{
			get
			{
				return this._isenabled;
			}
			set
			{
				if ((this._isenabled != value))
				{
					this.OnisenabledChanging(value);
					this.SendPropertyChanging();
					this._isenabled = value;
					this.SendPropertyChanged("isenabled");
					this.OnisenabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="usergroup_useraccount", Storage="_useraccounts", ThisKey="usergroupid", OtherKey="usergroupid")]
		public EntitySet<useraccount> useraccounts
		{
			get
			{
				return this._useraccounts;
			}
			set
			{
				this._useraccounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_useraccounts(useraccount entity)
		{
			this.SendPropertyChanging();
			entity.usergroup = this;
		}
		
		private void detach_useraccounts(useraccount entity)
		{
			this.SendPropertyChanging();
			entity.usergroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.applicationsetting")]
	public partial class applicationsetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _applicationsettingid;
		
		private string _name;
		
		private string _value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnapplicationsettingidChanging(int value);
    partial void OnapplicationsettingidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    #endregion
		
		public applicationsetting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_applicationsettingid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int applicationsettingid
		{
			get
			{
				return this._applicationsettingid;
			}
			set
			{
				if ((this._applicationsettingid != value))
				{
					this.OnapplicationsettingidChanging(value);
					this.SendPropertyChanging();
					this._applicationsettingid = value;
					this.SendPropertyChanged("applicationsettingid");
					this.OnapplicationsettingidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="VarChar(250)")]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sitemap")]
	public partial class sitemap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _sitemapid;
		
		private System.Nullable<int> _sitemapparentid;
		
		private string _title;
		
		private int _level;
		
		private string _reference;
		
		private string _menudisplayname;
		
		private string _controller;
		
		private string _action;
		
		private string _routename;
		
		private int _staticcontentid;
		
		private string _overrideurl;
		
		private string _navcssclass;
		
		private bool _enabled;
		
		private int _sortorder;
		
		private string _routenamespaces;
		
		private bool _menuvisible;
		
		private bool _footervisible;
		
		private EntitySet<sitemap> _sitemaps;
		
		private EntityRef<sitemap> _sitemap1;
		
		private EntityRef<staticcontent> _staticcontent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsitemapidChanging(int value);
    partial void OnsitemapidChanged();
    partial void OnsitemapparentidChanging(System.Nullable<int> value);
    partial void OnsitemapparentidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnlevelChanging(int value);
    partial void OnlevelChanged();
    partial void OnreferenceChanging(string value);
    partial void OnreferenceChanged();
    partial void OnmenudisplaynameChanging(string value);
    partial void OnmenudisplaynameChanged();
    partial void OncontrollerChanging(string value);
    partial void OncontrollerChanged();
    partial void OnactionChanging(string value);
    partial void OnactionChanged();
    partial void OnroutenameChanging(string value);
    partial void OnroutenameChanged();
    partial void OnstaticcontentidChanging(int value);
    partial void OnstaticcontentidChanged();
    partial void OnoverrideurlChanging(string value);
    partial void OnoverrideurlChanged();
    partial void OnnavcssclassChanging(string value);
    partial void OnnavcssclassChanged();
    partial void OnenabledChanging(bool value);
    partial void OnenabledChanged();
    partial void OnsortorderChanging(int value);
    partial void OnsortorderChanged();
    partial void OnroutenamespaceChanging(string value);
    partial void OnroutenamespaceChanged();
    partial void OnmenuvisibleChanging(bool value);
    partial void OnmenuvisibleChanged();
    partial void OnfootervisibleChanging(bool value);
    partial void OnfootervisibleChanged();
    #endregion
		
		public sitemap()
		{
			this._sitemaps = new EntitySet<sitemap>(new Action<sitemap>(this.attach_sitemaps), new Action<sitemap>(this.detach_sitemaps));
			this._sitemap1 = default(EntityRef<sitemap>);
			this._staticcontent = default(EntityRef<staticcontent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sitemapid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int sitemapid
		{
			get
			{
				return this._sitemapid;
			}
			set
			{
				if ((this._sitemapid != value))
				{
					this.OnsitemapidChanging(value);
					this.SendPropertyChanging();
					this._sitemapid = value;
					this.SendPropertyChanged("sitemapid");
					this.OnsitemapidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sitemapparentid", DbType="Int")]
		public System.Nullable<int> sitemapparentid
		{
			get
			{
				return this._sitemapparentid;
			}
			set
			{
				if ((this._sitemapparentid != value))
				{
					if (this._sitemap1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsitemapparentidChanging(value);
					this.SendPropertyChanging();
					this._sitemapparentid = value;
					this.SendPropertyChanged("sitemapparentid");
					this.OnsitemapparentidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[level]", Storage="_level", DbType="Int NOT NULL")]
		public int level
		{
			get
			{
				return this._level;
			}
			set
			{
				if ((this._level != value))
				{
					this.OnlevelChanging(value);
					this.SendPropertyChanging();
					this._level = value;
					this.SendPropertyChanged("level");
					this.OnlevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reference", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string reference
		{
			get
			{
				return this._reference;
			}
			set
			{
				if ((this._reference != value))
				{
					this.OnreferenceChanging(value);
					this.SendPropertyChanging();
					this._reference = value;
					this.SendPropertyChanged("reference");
					this.OnreferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_menudisplayname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string menudisplayname
		{
			get
			{
				return this._menudisplayname;
			}
			set
			{
				if ((this._menudisplayname != value))
				{
					this.OnmenudisplaynameChanging(value);
					this.SendPropertyChanging();
					this._menudisplayname = value;
					this.SendPropertyChanged("menudisplayname");
					this.OnmenudisplaynameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_controller", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string controller
		{
			get
			{
				return this._controller;
			}
			set
			{
				if ((this._controller != value))
				{
					this.OncontrollerChanging(value);
					this.SendPropertyChanging();
					this._controller = value;
					this.SendPropertyChanged("controller");
					this.OncontrollerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_action", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string action
		{
			get
			{
				return this._action;
			}
			set
			{
				if ((this._action != value))
				{
					this.OnactionChanging(value);
					this.SendPropertyChanging();
					this._action = value;
					this.SendPropertyChanged("action");
					this.OnactionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_routename", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string routename
		{
			get
			{
				return this._routename;
			}
			set
			{
				if ((this._routename != value))
				{
					this.OnroutenameChanging(value);
					this.SendPropertyChanging();
					this._routename = value;
					this.SendPropertyChanged("routename");
					this.OnroutenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staticcontentid", DbType="Int NOT NULL")]
		public int staticcontentid
		{
			get
			{
				return this._staticcontentid;
			}
			set
			{
				if ((this._staticcontentid != value))
				{
					if (this._staticcontent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstaticcontentidChanging(value);
					this.SendPropertyChanging();
					this._staticcontentid = value;
					this.SendPropertyChanged("staticcontentid");
					this.OnstaticcontentidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_overrideurl", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string overrideurl
		{
			get
			{
				return this._overrideurl;
			}
			set
			{
				if ((this._overrideurl != value))
				{
					this.OnoverrideurlChanging(value);
					this.SendPropertyChanging();
					this._overrideurl = value;
					this.SendPropertyChanged("overrideurl");
					this.OnoverrideurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_navcssclass", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string navcssclass
		{
			get
			{
				return this._navcssclass;
			}
			set
			{
				if ((this._navcssclass != value))
				{
					this.OnnavcssclassChanging(value);
					this.SendPropertyChanging();
					this._navcssclass = value;
					this.SendPropertyChanged("navcssclass");
					this.OnnavcssclassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_enabled", DbType="Bit NOT NULL")]
		public bool enabled
		{
			get
			{
				return this._enabled;
			}
			set
			{
				if ((this._enabled != value))
				{
					this.OnenabledChanging(value);
					this.SendPropertyChanging();
					this._enabled = value;
					this.SendPropertyChanged("enabled");
					this.OnenabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sortorder", DbType="Int NOT NULL")]
		public int sortorder
		{
			get
			{
				return this._sortorder;
			}
			set
			{
				if ((this._sortorder != value))
				{
					this.OnsortorderChanging(value);
					this.SendPropertyChanging();
					this._sortorder = value;
					this.SendPropertyChanged("sortorder");
					this.OnsortorderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_routenamespaces", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string routenamespace
		{
			get
			{
				return this._routenamespaces;
			}
			set
			{
				if ((this._routenamespaces != value))
				{
					this.OnroutenamespaceChanging(value);
					this.SendPropertyChanging();
					this._routenamespaces = value;
					this.SendPropertyChanged("routenamespace");
					this.OnroutenamespaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_menuvisible", DbType="Bit NOT NULL")]
		public bool menuvisible
		{
			get
			{
				return this._menuvisible;
			}
			set
			{
				if ((this._menuvisible != value))
				{
					this.OnmenuvisibleChanging(value);
					this.SendPropertyChanging();
					this._menuvisible = value;
					this.SendPropertyChanged("menuvisible");
					this.OnmenuvisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_footervisible", DbType="Bit NOT NULL")]
		public bool footervisible
		{
			get
			{
				return this._footervisible;
			}
			set
			{
				if ((this._footervisible != value))
				{
					this.OnfootervisibleChanging(value);
					this.SendPropertyChanging();
					this._footervisible = value;
					this.SendPropertyChanged("footervisible");
					this.OnfootervisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sitemap_sitemap", Storage="_sitemaps", ThisKey="sitemapid", OtherKey="sitemapparentid")]
		public EntitySet<sitemap> sitemaps
		{
			get
			{
				return this._sitemaps;
			}
			set
			{
				this._sitemaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sitemap_sitemap", Storage="_sitemap1", ThisKey="sitemapparentid", OtherKey="sitemapid", IsForeignKey=true)]
		public sitemap sitemap1
		{
			get
			{
				return this._sitemap1.Entity;
			}
			set
			{
				sitemap previousValue = this._sitemap1.Entity;
				if (((previousValue != value) 
							|| (this._sitemap1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sitemap1.Entity = null;
						previousValue.sitemaps.Remove(this);
					}
					this._sitemap1.Entity = value;
					if ((value != null))
					{
						value.sitemaps.Add(this);
						this._sitemapparentid = value.sitemapid;
					}
					else
					{
						this._sitemapparentid = default(Nullable<int>);
					}
					this.SendPropertyChanged("sitemap1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="staticcontent_sitemap", Storage="_staticcontent", ThisKey="staticcontentid", OtherKey="staticcontentid", IsForeignKey=true)]
		public staticcontent staticcontent
		{
			get
			{
				return this._staticcontent.Entity;
			}
			set
			{
				staticcontent previousValue = this._staticcontent.Entity;
				if (((previousValue != value) 
							|| (this._staticcontent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._staticcontent.Entity = null;
						previousValue.sitemaps.Remove(this);
					}
					this._staticcontent.Entity = value;
					if ((value != null))
					{
						value.sitemaps.Add(this);
						this._staticcontentid = value.staticcontentid;
					}
					else
					{
						this._staticcontentid = default(int);
					}
					this.SendPropertyChanged("staticcontent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_sitemaps(sitemap entity)
		{
			this.SendPropertyChanging();
			entity.sitemap1 = this;
		}
		
		private void detach_sitemaps(sitemap entity)
		{
			this.SendPropertyChanging();
			entity.sitemap1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.color")]
	public partial class color : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _colorid;
		
		private string _name;
		
		private int _sortorder;
		
		private EntitySet<vehicle> _vehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncoloridChanging(int value);
    partial void OncoloridChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsortorderChanging(int value);
    partial void OnsortorderChanged();
    #endregion
		
		public color()
		{
			this._vehicles = new EntitySet<vehicle>(new Action<vehicle>(this.attach_vehicles), new Action<vehicle>(this.detach_vehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_colorid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int colorid
		{
			get
			{
				return this._colorid;
			}
			set
			{
				if ((this._colorid != value))
				{
					this.OncoloridChanging(value);
					this.SendPropertyChanging();
					this._colorid = value;
					this.SendPropertyChanged("colorid");
					this.OncoloridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sortorder", DbType="Int NOT NULL")]
		public int sortorder
		{
			get
			{
				return this._sortorder;
			}
			set
			{
				if ((this._sortorder != value))
				{
					this.OnsortorderChanging(value);
					this.SendPropertyChanging();
					this._sortorder = value;
					this.SendPropertyChanged("sortorder");
					this.OnsortorderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="color_vehicle", Storage="_vehicles", ThisKey="colorid", OtherKey="colorid")]
		public EntitySet<vehicle> vehicles
		{
			get
			{
				return this._vehicles;
			}
			set
			{
				this._vehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_vehicles(vehicle entity)
		{
			this.SendPropertyChanging();
			entity.color = this;
		}
		
		private void detach_vehicles(vehicle entity)
		{
			this.SendPropertyChanging();
			entity.color = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.bodytype")]
	public partial class bodytype : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _bodytypeid;
		
		private string _type;
		
		private int _sortorder;
		
		private EntitySet<vehicle> _vehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnbodytypeidChanging(int value);
    partial void OnbodytypeidChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnsortorderChanging(int value);
    partial void OnsortorderChanged();
    #endregion
		
		public bodytype()
		{
			this._vehicles = new EntitySet<vehicle>(new Action<vehicle>(this.attach_vehicles), new Action<vehicle>(this.detach_vehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bodytypeid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int bodytypeid
		{
			get
			{
				return this._bodytypeid;
			}
			set
			{
				if ((this._bodytypeid != value))
				{
					this.OnbodytypeidChanging(value);
					this.SendPropertyChanging();
					this._bodytypeid = value;
					this.SendPropertyChanged("bodytypeid");
					this.OnbodytypeidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sortorder", DbType="Int NOT NULL")]
		public int sortorder
		{
			get
			{
				return this._sortorder;
			}
			set
			{
				if ((this._sortorder != value))
				{
					this.OnsortorderChanging(value);
					this.SendPropertyChanging();
					this._sortorder = value;
					this.SendPropertyChanged("sortorder");
					this.OnsortorderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="bodytype_vehicle", Storage="_vehicles", ThisKey="bodytypeid", OtherKey="bodytypeid")]
		public EntitySet<vehicle> vehicles
		{
			get
			{
				return this._vehicles;
			}
			set
			{
				this._vehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_vehicles(vehicle entity)
		{
			this.SendPropertyChanging();
			entity.bodytype = this;
		}
		
		private void detach_vehicles(vehicle entity)
		{
			this.SendPropertyChanging();
			entity.bodytype = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.fueltype")]
	public partial class fueltype : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _fueltypeid;
		
		private string _type;
		
		private int _sortorder;
		
		private EntitySet<vehicle> _vehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfueltypeidChanging(int value);
    partial void OnfueltypeidChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnsortorderChanging(int value);
    partial void OnsortorderChanged();
    #endregion
		
		public fueltype()
		{
			this._vehicles = new EntitySet<vehicle>(new Action<vehicle>(this.attach_vehicles), new Action<vehicle>(this.detach_vehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fueltypeid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int fueltypeid
		{
			get
			{
				return this._fueltypeid;
			}
			set
			{
				if ((this._fueltypeid != value))
				{
					this.OnfueltypeidChanging(value);
					this.SendPropertyChanging();
					this._fueltypeid = value;
					this.SendPropertyChanged("fueltypeid");
					this.OnfueltypeidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sortorder", DbType="Int NOT NULL")]
		public int sortorder
		{
			get
			{
				return this._sortorder;
			}
			set
			{
				if ((this._sortorder != value))
				{
					this.OnsortorderChanging(value);
					this.SendPropertyChanging();
					this._sortorder = value;
					this.SendPropertyChanged("sortorder");
					this.OnsortorderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="fueltype_vehicle", Storage="_vehicles", ThisKey="fueltypeid", OtherKey="fueltypeid")]
		public EntitySet<vehicle> vehicles
		{
			get
			{
				return this._vehicles;
			}
			set
			{
				this._vehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_vehicles(vehicle entity)
		{
			this.SendPropertyChanging();
			entity.fueltype = this;
		}
		
		private void detach_vehicles(vehicle entity)
		{
			this.SendPropertyChanging();
			entity.fueltype = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.transmission")]
	public partial class transmission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _transmissionid;
		
		private string _name;
		
		private int _sortorder;
		
		private EntitySet<vehicle> _vehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntransmissionidChanging(int value);
    partial void OntransmissionidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsortorderChanging(int value);
    partial void OnsortorderChanged();
    #endregion
		
		public transmission()
		{
			this._vehicles = new EntitySet<vehicle>(new Action<vehicle>(this.attach_vehicles), new Action<vehicle>(this.detach_vehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_transmissionid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int transmissionid
		{
			get
			{
				return this._transmissionid;
			}
			set
			{
				if ((this._transmissionid != value))
				{
					this.OntransmissionidChanging(value);
					this.SendPropertyChanging();
					this._transmissionid = value;
					this.SendPropertyChanged("transmissionid");
					this.OntransmissionidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sortorder", DbType="Int NOT NULL")]
		public int sortorder
		{
			get
			{
				return this._sortorder;
			}
			set
			{
				if ((this._sortorder != value))
				{
					this.OnsortorderChanging(value);
					this.SendPropertyChanging();
					this._sortorder = value;
					this.SendPropertyChanged("sortorder");
					this.OnsortorderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="transmission_vehicle", Storage="_vehicles", ThisKey="transmissionid", OtherKey="transmissionid")]
		public EntitySet<vehicle> vehicles
		{
			get
			{
				return this._vehicles;
			}
			set
			{
				this._vehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_vehicles(vehicle entity)
		{
			this.SendPropertyChanging();
			entity.transmission = this;
		}
		
		private void detach_vehicles(vehicle entity)
		{
			this.SendPropertyChanging();
			entity.transmission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.model")]
	public partial class model : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _modelid;
		
		private int _makeid;
		
		private string _name;
		
		private int _sortorder;
		
		private EntitySet<vehicle> _vehicles;
		
		private EntityRef<make> _make;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmodelidChanging(int value);
    partial void OnmodelidChanged();
    partial void OnmakeidChanging(int value);
    partial void OnmakeidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsortorderChanging(int value);
    partial void OnsortorderChanged();
    #endregion
		
		public model()
		{
			this._vehicles = new EntitySet<vehicle>(new Action<vehicle>(this.attach_vehicles), new Action<vehicle>(this.detach_vehicles));
			this._make = default(EntityRef<make>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modelid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int modelid
		{
			get
			{
				return this._modelid;
			}
			set
			{
				if ((this._modelid != value))
				{
					this.OnmodelidChanging(value);
					this.SendPropertyChanging();
					this._modelid = value;
					this.SendPropertyChanged("modelid");
					this.OnmodelidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_makeid", DbType="Int NOT NULL")]
		public int makeid
		{
			get
			{
				return this._makeid;
			}
			set
			{
				if ((this._makeid != value))
				{
					if (this._make.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmakeidChanging(value);
					this.SendPropertyChanging();
					this._makeid = value;
					this.SendPropertyChanged("makeid");
					this.OnmakeidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sortorder", DbType="Int NOT NULL")]
		public int sortorder
		{
			get
			{
				return this._sortorder;
			}
			set
			{
				if ((this._sortorder != value))
				{
					this.OnsortorderChanging(value);
					this.SendPropertyChanging();
					this._sortorder = value;
					this.SendPropertyChanged("sortorder");
					this.OnsortorderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="model_vehicle", Storage="_vehicles", ThisKey="modelid", OtherKey="modelid")]
		public EntitySet<vehicle> vehicles
		{
			get
			{
				return this._vehicles;
			}
			set
			{
				this._vehicles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="make_model", Storage="_make", ThisKey="makeid", OtherKey="makeid", IsForeignKey=true)]
		public make make
		{
			get
			{
				return this._make.Entity;
			}
			set
			{
				make previousValue = this._make.Entity;
				if (((previousValue != value) 
							|| (this._make.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._make.Entity = null;
						previousValue.models.Remove(this);
					}
					this._make.Entity = value;
					if ((value != null))
					{
						value.models.Add(this);
						this._makeid = value.makeid;
					}
					else
					{
						this._makeid = default(int);
					}
					this.SendPropertyChanged("make");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_vehicles(vehicle entity)
		{
			this.SendPropertyChanging();
			entity.model = this;
		}
		
		private void detach_vehicles(vehicle entity)
		{
			this.SendPropertyChanging();
			entity.model = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.make")]
	public partial class make : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _makeid;
		
		private string _name;
		
		private string _logo;
		
		private int _sortorder;
		
		private EntitySet<model> _models;
		
		private EntitySet<vehicle> _vehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmakeidChanging(int value);
    partial void OnmakeidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnlogoChanging(string value);
    partial void OnlogoChanged();
    partial void OnsortorderChanging(int value);
    partial void OnsortorderChanged();
    #endregion
		
		public make()
		{
			this._models = new EntitySet<model>(new Action<model>(this.attach_models), new Action<model>(this.detach_models));
			this._vehicles = new EntitySet<vehicle>(new Action<vehicle>(this.attach_vehicles), new Action<vehicle>(this.detach_vehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_makeid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int makeid
		{
			get
			{
				return this._makeid;
			}
			set
			{
				if ((this._makeid != value))
				{
					this.OnmakeidChanging(value);
					this.SendPropertyChanging();
					this._makeid = value;
					this.SendPropertyChanged("makeid");
					this.OnmakeidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logo", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string logo
		{
			get
			{
				return this._logo;
			}
			set
			{
				if ((this._logo != value))
				{
					this.OnlogoChanging(value);
					this.SendPropertyChanging();
					this._logo = value;
					this.SendPropertyChanged("logo");
					this.OnlogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sortorder", DbType="Int NOT NULL")]
		public int sortorder
		{
			get
			{
				return this._sortorder;
			}
			set
			{
				if ((this._sortorder != value))
				{
					this.OnsortorderChanging(value);
					this.SendPropertyChanging();
					this._sortorder = value;
					this.SendPropertyChanged("sortorder");
					this.OnsortorderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="make_model", Storage="_models", ThisKey="makeid", OtherKey="makeid")]
		public EntitySet<model> models
		{
			get
			{
				return this._models;
			}
			set
			{
				this._models.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="make_vehicle", Storage="_vehicles", ThisKey="makeid", OtherKey="makeid")]
		public EntitySet<vehicle> vehicles
		{
			get
			{
				return this._vehicles;
			}
			set
			{
				this._vehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_models(model entity)
		{
			this.SendPropertyChanging();
			entity.make = this;
		}
		
		private void detach_models(model entity)
		{
			this.SendPropertyChanging();
			entity.make = null;
		}
		
		private void attach_vehicles(vehicle entity)
		{
			this.SendPropertyChanging();
			entity.make = this;
		}
		
		private void detach_vehicles(vehicle entity)
		{
			this.SendPropertyChanging();
			entity.make = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.features")]
	public partial class feature : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _featuresid;
		
		private string _interiordetails;
		
		private string _exteriordetails;
		
		private EntitySet<vehicle> _vehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfeaturesidChanging(int value);
    partial void OnfeaturesidChanged();
    partial void OninteriordetailsChanging(string value);
    partial void OninteriordetailsChanged();
    partial void OnexteriordetailsChanging(string value);
    partial void OnexteriordetailsChanged();
    #endregion
		
		public feature()
		{
			this._vehicles = new EntitySet<vehicle>(new Action<vehicle>(this.attach_vehicles), new Action<vehicle>(this.detach_vehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_featuresid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int featuresid
		{
			get
			{
				return this._featuresid;
			}
			set
			{
				if ((this._featuresid != value))
				{
					this.OnfeaturesidChanging(value);
					this.SendPropertyChanging();
					this._featuresid = value;
					this.SendPropertyChanged("featuresid");
					this.OnfeaturesidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_interiordetails", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string interiordetails
		{
			get
			{
				return this._interiordetails;
			}
			set
			{
				if ((this._interiordetails != value))
				{
					this.OninteriordetailsChanging(value);
					this.SendPropertyChanging();
					this._interiordetails = value;
					this.SendPropertyChanged("interiordetails");
					this.OninteriordetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exteriordetails", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string exteriordetails
		{
			get
			{
				return this._exteriordetails;
			}
			set
			{
				if ((this._exteriordetails != value))
				{
					this.OnexteriordetailsChanging(value);
					this.SendPropertyChanging();
					this._exteriordetails = value;
					this.SendPropertyChanged("exteriordetails");
					this.OnexteriordetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="feature_vehicle", Storage="_vehicles", ThisKey="featuresid", OtherKey="featuresid")]
		public EntitySet<vehicle> vehicles
		{
			get
			{
				return this._vehicles;
			}
			set
			{
				this._vehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_vehicles(vehicle entity)
		{
			this.SendPropertyChanging();
			entity.feature = this;
		}
		
		private void detach_vehicles(vehicle entity)
		{
			this.SendPropertyChanging();
			entity.feature = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vehicle")]
	public partial class vehicle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _vehicleid;
		
		private string _reference;
		
		private string _name;
		
		private int _makeid;
		
		private int _modelid;
		
		private int _transmissionid;
		
		private int _fueltypeid;
		
		private int _bodytypeid;
		
		private int _colorid;
		
		private System.Nullable<int> _dealerid;
		
		private int _dimensionsid;
		
		private int _featuresid;
		
		private int _performanceid;
		
		private int _safetydetailsid;
		
		private string _shortdescription;
		
		private string _fulldescription;
		
		private int _numberofdoors;
		
		private int _numberofseats;
		
		private int _mileage;
		
		private System.Nullable<System.DateTime> _dateofmanufacture;
		
		private System.Nullable<decimal> _enginesize;
		
		private string _co2emissions;
		
		private int _manufacturerwarrantyyears;
		
		private int _manufacturerwarrantymiles;
		
		private int _paintworkguaranteeyears;
		
		private int _corrosionguaranteeyears;
		
		private string _taxband;
		
		private int _yearofregistration;
		
		private System.Nullable<decimal> _sellingprice;
		
		private bool _enabled;
		
		private int _sortorder;
		
		private System.DateTime _dateadded;
		
		private System.Nullable<System.DateTime> _datesold;
		
		private bool _isnew;
		
		private EntitySet<vehicleimage> _vehicleimages;
		
		private EntityRef<bodytype> _bodytype;
		
		private EntityRef<color> _color;
		
		private EntityRef<dimension> _dimension;
		
		private EntityRef<feature> _feature;
		
		private EntityRef<fueltype> _fueltype;
		
		private EntityRef<make> _make;
		
		private EntityRef<model> _model;
		
		private EntityRef<performance> _performance;
		
		private EntityRef<safetydetail> _safetydetail;
		
		private EntityRef<transmission> _transmission;
		
		private EntityRef<dealer> _dealer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvehicleidChanging(int value);
    partial void OnvehicleidChanged();
    partial void OnreferenceChanging(string value);
    partial void OnreferenceChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnmakeidChanging(int value);
    partial void OnmakeidChanged();
    partial void OnmodelidChanging(int value);
    partial void OnmodelidChanged();
    partial void OntransmissionidChanging(int value);
    partial void OntransmissionidChanged();
    partial void OnfueltypeidChanging(int value);
    partial void OnfueltypeidChanged();
    partial void OnbodytypeidChanging(int value);
    partial void OnbodytypeidChanged();
    partial void OncoloridChanging(int value);
    partial void OncoloridChanged();
    partial void OndealeridChanging(System.Nullable<int> value);
    partial void OndealeridChanged();
    partial void OndimensionsidChanging(int value);
    partial void OndimensionsidChanged();
    partial void OnfeaturesidChanging(int value);
    partial void OnfeaturesidChanged();
    partial void OnperformanceidChanging(int value);
    partial void OnperformanceidChanged();
    partial void OnsafetydetailsidChanging(int value);
    partial void OnsafetydetailsidChanged();
    partial void OnshortdescriptionChanging(string value);
    partial void OnshortdescriptionChanged();
    partial void OnfulldescriptionChanging(string value);
    partial void OnfulldescriptionChanged();
    partial void OnnumberofdoorsChanging(int value);
    partial void OnnumberofdoorsChanged();
    partial void OnnumberofseatsChanging(int value);
    partial void OnnumberofseatsChanged();
    partial void OnmileageChanging(int value);
    partial void OnmileageChanged();
    partial void OndateofmanufactureChanging(System.Nullable<System.DateTime> value);
    partial void OndateofmanufactureChanged();
    partial void OnenginesizeChanging(System.Nullable<decimal> value);
    partial void OnenginesizeChanged();
    partial void Onco2emissionsChanging(string value);
    partial void Onco2emissionsChanged();
    partial void OnmanufacturerwarrantyyearsChanging(int value);
    partial void OnmanufacturerwarrantyyearsChanged();
    partial void OnmanufacturerwarrantymilesChanging(int value);
    partial void OnmanufacturerwarrantymilesChanged();
    partial void OnpaintworkguaranteeyearsChanging(int value);
    partial void OnpaintworkguaranteeyearsChanged();
    partial void OncorrosionguaranteeyearsChanging(int value);
    partial void OncorrosionguaranteeyearsChanged();
    partial void OntaxbandChanging(string value);
    partial void OntaxbandChanged();
    partial void OnyearofregistrationChanging(int value);
    partial void OnyearofregistrationChanged();
    partial void OnsellingpriceChanging(System.Nullable<decimal> value);
    partial void OnsellingpriceChanged();
    partial void OnenabledChanging(bool value);
    partial void OnenabledChanged();
    partial void OnsortorderChanging(int value);
    partial void OnsortorderChanged();
    partial void OndateaddedChanging(System.DateTime value);
    partial void OndateaddedChanged();
    partial void OndatesoldChanging(System.Nullable<System.DateTime> value);
    partial void OndatesoldChanged();
    partial void OnisnewChanging(bool value);
    partial void OnisnewChanged();
    #endregion
		
		public vehicle()
		{
			this._vehicleimages = new EntitySet<vehicleimage>(new Action<vehicleimage>(this.attach_vehicleimages), new Action<vehicleimage>(this.detach_vehicleimages));
			this._bodytype = default(EntityRef<bodytype>);
			this._color = default(EntityRef<color>);
			this._dimension = default(EntityRef<dimension>);
			this._feature = default(EntityRef<feature>);
			this._fueltype = default(EntityRef<fueltype>);
			this._make = default(EntityRef<make>);
			this._model = default(EntityRef<model>);
			this._performance = default(EntityRef<performance>);
			this._safetydetail = default(EntityRef<safetydetail>);
			this._transmission = default(EntityRef<transmission>);
			this._dealer = default(EntityRef<dealer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vehicleid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int vehicleid
		{
			get
			{
				return this._vehicleid;
			}
			set
			{
				if ((this._vehicleid != value))
				{
					this.OnvehicleidChanging(value);
					this.SendPropertyChanging();
					this._vehicleid = value;
					this.SendPropertyChanged("vehicleid");
					this.OnvehicleidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reference", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string reference
		{
			get
			{
				return this._reference;
			}
			set
			{
				if ((this._reference != value))
				{
					this.OnreferenceChanging(value);
					this.SendPropertyChanging();
					this._reference = value;
					this.SendPropertyChanged("reference");
					this.OnreferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_makeid", DbType="Int NOT NULL")]
		public int makeid
		{
			get
			{
				return this._makeid;
			}
			set
			{
				if ((this._makeid != value))
				{
					if (this._make.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmakeidChanging(value);
					this.SendPropertyChanging();
					this._makeid = value;
					this.SendPropertyChanged("makeid");
					this.OnmakeidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modelid", DbType="Int NOT NULL")]
		public int modelid
		{
			get
			{
				return this._modelid;
			}
			set
			{
				if ((this._modelid != value))
				{
					if (this._model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmodelidChanging(value);
					this.SendPropertyChanging();
					this._modelid = value;
					this.SendPropertyChanged("modelid");
					this.OnmodelidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_transmissionid", DbType="Int NOT NULL")]
		public int transmissionid
		{
			get
			{
				return this._transmissionid;
			}
			set
			{
				if ((this._transmissionid != value))
				{
					if (this._transmission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntransmissionidChanging(value);
					this.SendPropertyChanging();
					this._transmissionid = value;
					this.SendPropertyChanged("transmissionid");
					this.OntransmissionidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fueltypeid", DbType="Int NOT NULL")]
		public int fueltypeid
		{
			get
			{
				return this._fueltypeid;
			}
			set
			{
				if ((this._fueltypeid != value))
				{
					if (this._fueltype.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfueltypeidChanging(value);
					this.SendPropertyChanging();
					this._fueltypeid = value;
					this.SendPropertyChanged("fueltypeid");
					this.OnfueltypeidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bodytypeid", DbType="Int NOT NULL")]
		public int bodytypeid
		{
			get
			{
				return this._bodytypeid;
			}
			set
			{
				if ((this._bodytypeid != value))
				{
					if (this._bodytype.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbodytypeidChanging(value);
					this.SendPropertyChanging();
					this._bodytypeid = value;
					this.SendPropertyChanged("bodytypeid");
					this.OnbodytypeidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_colorid", DbType="Int NOT NULL")]
		public int colorid
		{
			get
			{
				return this._colorid;
			}
			set
			{
				if ((this._colorid != value))
				{
					if (this._color.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncoloridChanging(value);
					this.SendPropertyChanging();
					this._colorid = value;
					this.SendPropertyChanged("colorid");
					this.OncoloridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dealerid", DbType="Int")]
		public System.Nullable<int> dealerid
		{
			get
			{
				return this._dealerid;
			}
			set
			{
				if ((this._dealerid != value))
				{
					if (this._dealer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndealeridChanging(value);
					this.SendPropertyChanging();
					this._dealerid = value;
					this.SendPropertyChanged("dealerid");
					this.OndealeridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dimensionsid", DbType="Int NOT NULL")]
		public int dimensionsid
		{
			get
			{
				return this._dimensionsid;
			}
			set
			{
				if ((this._dimensionsid != value))
				{
					if (this._dimension.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndimensionsidChanging(value);
					this.SendPropertyChanging();
					this._dimensionsid = value;
					this.SendPropertyChanged("dimensionsid");
					this.OndimensionsidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_featuresid", DbType="Int NOT NULL")]
		public int featuresid
		{
			get
			{
				return this._featuresid;
			}
			set
			{
				if ((this._featuresid != value))
				{
					if (this._feature.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfeaturesidChanging(value);
					this.SendPropertyChanging();
					this._featuresid = value;
					this.SendPropertyChanged("featuresid");
					this.OnfeaturesidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_performanceid", DbType="Int NOT NULL")]
		public int performanceid
		{
			get
			{
				return this._performanceid;
			}
			set
			{
				if ((this._performanceid != value))
				{
					if (this._performance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnperformanceidChanging(value);
					this.SendPropertyChanging();
					this._performanceid = value;
					this.SendPropertyChanged("performanceid");
					this.OnperformanceidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_safetydetailsid", DbType="Int NOT NULL")]
		public int safetydetailsid
		{
			get
			{
				return this._safetydetailsid;
			}
			set
			{
				if ((this._safetydetailsid != value))
				{
					if (this._safetydetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsafetydetailsidChanging(value);
					this.SendPropertyChanging();
					this._safetydetailsid = value;
					this.SendPropertyChanged("safetydetailsid");
					this.OnsafetydetailsidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_shortdescription", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string shortdescription
		{
			get
			{
				return this._shortdescription;
			}
			set
			{
				if ((this._shortdescription != value))
				{
					this.OnshortdescriptionChanging(value);
					this.SendPropertyChanging();
					this._shortdescription = value;
					this.SendPropertyChanged("shortdescription");
					this.OnshortdescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fulldescription", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string fulldescription
		{
			get
			{
				return this._fulldescription;
			}
			set
			{
				if ((this._fulldescription != value))
				{
					this.OnfulldescriptionChanging(value);
					this.SendPropertyChanging();
					this._fulldescription = value;
					this.SendPropertyChanged("fulldescription");
					this.OnfulldescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numberofdoors", DbType="Int NOT NULL")]
		public int numberofdoors
		{
			get
			{
				return this._numberofdoors;
			}
			set
			{
				if ((this._numberofdoors != value))
				{
					this.OnnumberofdoorsChanging(value);
					this.SendPropertyChanging();
					this._numberofdoors = value;
					this.SendPropertyChanged("numberofdoors");
					this.OnnumberofdoorsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numberofseats", DbType="Int NOT NULL")]
		public int numberofseats
		{
			get
			{
				return this._numberofseats;
			}
			set
			{
				if ((this._numberofseats != value))
				{
					this.OnnumberofseatsChanging(value);
					this.SendPropertyChanging();
					this._numberofseats = value;
					this.SendPropertyChanged("numberofseats");
					this.OnnumberofseatsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mileage", DbType="Int NOT NULL")]
		public int mileage
		{
			get
			{
				return this._mileage;
			}
			set
			{
				if ((this._mileage != value))
				{
					this.OnmileageChanging(value);
					this.SendPropertyChanging();
					this._mileage = value;
					this.SendPropertyChanged("mileage");
					this.OnmileageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateofmanufacture", DbType="DateTime")]
		public System.Nullable<System.DateTime> dateofmanufacture
		{
			get
			{
				return this._dateofmanufacture;
			}
			set
			{
				if ((this._dateofmanufacture != value))
				{
					this.OndateofmanufactureChanging(value);
					this.SendPropertyChanging();
					this._dateofmanufacture = value;
					this.SendPropertyChanged("dateofmanufacture");
					this.OndateofmanufactureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_enginesize", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> enginesize
		{
			get
			{
				return this._enginesize;
			}
			set
			{
				if ((this._enginesize != value))
				{
					this.OnenginesizeChanging(value);
					this.SendPropertyChanging();
					this._enginesize = value;
					this.SendPropertyChanged("enginesize");
					this.OnenginesizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_co2emissions", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string co2emissions
		{
			get
			{
				return this._co2emissions;
			}
			set
			{
				if ((this._co2emissions != value))
				{
					this.Onco2emissionsChanging(value);
					this.SendPropertyChanging();
					this._co2emissions = value;
					this.SendPropertyChanged("co2emissions");
					this.Onco2emissionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_manufacturerwarrantyyears", DbType="Int NOT NULL")]
		public int manufacturerwarrantyyears
		{
			get
			{
				return this._manufacturerwarrantyyears;
			}
			set
			{
				if ((this._manufacturerwarrantyyears != value))
				{
					this.OnmanufacturerwarrantyyearsChanging(value);
					this.SendPropertyChanging();
					this._manufacturerwarrantyyears = value;
					this.SendPropertyChanged("manufacturerwarrantyyears");
					this.OnmanufacturerwarrantyyearsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_manufacturerwarrantymiles", DbType="Int NOT NULL")]
		public int manufacturerwarrantymiles
		{
			get
			{
				return this._manufacturerwarrantymiles;
			}
			set
			{
				if ((this._manufacturerwarrantymiles != value))
				{
					this.OnmanufacturerwarrantymilesChanging(value);
					this.SendPropertyChanging();
					this._manufacturerwarrantymiles = value;
					this.SendPropertyChanged("manufacturerwarrantymiles");
					this.OnmanufacturerwarrantymilesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paintworkguaranteeyears", DbType="Int NOT NULL")]
		public int paintworkguaranteeyears
		{
			get
			{
				return this._paintworkguaranteeyears;
			}
			set
			{
				if ((this._paintworkguaranteeyears != value))
				{
					this.OnpaintworkguaranteeyearsChanging(value);
					this.SendPropertyChanging();
					this._paintworkguaranteeyears = value;
					this.SendPropertyChanged("paintworkguaranteeyears");
					this.OnpaintworkguaranteeyearsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_corrosionguaranteeyears", DbType="Int NOT NULL")]
		public int corrosionguaranteeyears
		{
			get
			{
				return this._corrosionguaranteeyears;
			}
			set
			{
				if ((this._corrosionguaranteeyears != value))
				{
					this.OncorrosionguaranteeyearsChanging(value);
					this.SendPropertyChanging();
					this._corrosionguaranteeyears = value;
					this.SendPropertyChanged("corrosionguaranteeyears");
					this.OncorrosionguaranteeyearsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taxband", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string taxband
		{
			get
			{
				return this._taxband;
			}
			set
			{
				if ((this._taxband != value))
				{
					this.OntaxbandChanging(value);
					this.SendPropertyChanging();
					this._taxband = value;
					this.SendPropertyChanged("taxband");
					this.OntaxbandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_yearofregistration", DbType="Int NOT NULL")]
		public int yearofregistration
		{
			get
			{
				return this._yearofregistration;
			}
			set
			{
				if ((this._yearofregistration != value))
				{
					this.OnyearofregistrationChanging(value);
					this.SendPropertyChanging();
					this._yearofregistration = value;
					this.SendPropertyChanged("yearofregistration");
					this.OnyearofregistrationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sellingprice", DbType="Money")]
		public System.Nullable<decimal> sellingprice
		{
			get
			{
				return this._sellingprice;
			}
			set
			{
				if ((this._sellingprice != value))
				{
					this.OnsellingpriceChanging(value);
					this.SendPropertyChanging();
					this._sellingprice = value;
					this.SendPropertyChanged("sellingprice");
					this.OnsellingpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_enabled", DbType="Bit NOT NULL")]
		public bool enabled
		{
			get
			{
				return this._enabled;
			}
			set
			{
				if ((this._enabled != value))
				{
					this.OnenabledChanging(value);
					this.SendPropertyChanging();
					this._enabled = value;
					this.SendPropertyChanged("enabled");
					this.OnenabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sortorder", DbType="Int NOT NULL")]
		public int sortorder
		{
			get
			{
				return this._sortorder;
			}
			set
			{
				if ((this._sortorder != value))
				{
					this.OnsortorderChanging(value);
					this.SendPropertyChanging();
					this._sortorder = value;
					this.SendPropertyChanged("sortorder");
					this.OnsortorderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateadded", DbType="DateTime NOT NULL")]
		public System.DateTime dateadded
		{
			get
			{
				return this._dateadded;
			}
			set
			{
				if ((this._dateadded != value))
				{
					this.OndateaddedChanging(value);
					this.SendPropertyChanging();
					this._dateadded = value;
					this.SendPropertyChanged("dateadded");
					this.OndateaddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_datesold", DbType="DateTime")]
		public System.Nullable<System.DateTime> datesold
		{
			get
			{
				return this._datesold;
			}
			set
			{
				if ((this._datesold != value))
				{
					this.OndatesoldChanging(value);
					this.SendPropertyChanging();
					this._datesold = value;
					this.SendPropertyChanged("datesold");
					this.OndatesoldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isnew", DbType="Bit NOT NULL")]
		public bool isnew
		{
			get
			{
				return this._isnew;
			}
			set
			{
				if ((this._isnew != value))
				{
					this.OnisnewChanging(value);
					this.SendPropertyChanging();
					this._isnew = value;
					this.SendPropertyChanged("isnew");
					this.OnisnewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vehicle_vehicleimage", Storage="_vehicleimages", ThisKey="vehicleid", OtherKey="vehicleid")]
		public EntitySet<vehicleimage> vehicleimages
		{
			get
			{
				return this._vehicleimages;
			}
			set
			{
				this._vehicleimages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="bodytype_vehicle", Storage="_bodytype", ThisKey="bodytypeid", OtherKey="bodytypeid", IsForeignKey=true)]
		public bodytype bodytype
		{
			get
			{
				return this._bodytype.Entity;
			}
			set
			{
				bodytype previousValue = this._bodytype.Entity;
				if (((previousValue != value) 
							|| (this._bodytype.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._bodytype.Entity = null;
						previousValue.vehicles.Remove(this);
					}
					this._bodytype.Entity = value;
					if ((value != null))
					{
						value.vehicles.Add(this);
						this._bodytypeid = value.bodytypeid;
					}
					else
					{
						this._bodytypeid = default(int);
					}
					this.SendPropertyChanged("bodytype");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="color_vehicle", Storage="_color", ThisKey="colorid", OtherKey="colorid", IsForeignKey=true)]
		public color color
		{
			get
			{
				return this._color.Entity;
			}
			set
			{
				color previousValue = this._color.Entity;
				if (((previousValue != value) 
							|| (this._color.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._color.Entity = null;
						previousValue.vehicles.Remove(this);
					}
					this._color.Entity = value;
					if ((value != null))
					{
						value.vehicles.Add(this);
						this._colorid = value.colorid;
					}
					else
					{
						this._colorid = default(int);
					}
					this.SendPropertyChanged("color");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dimension_vehicle", Storage="_dimension", ThisKey="dimensionsid", OtherKey="dimensionsid", IsForeignKey=true)]
		public dimension dimension
		{
			get
			{
				return this._dimension.Entity;
			}
			set
			{
				dimension previousValue = this._dimension.Entity;
				if (((previousValue != value) 
							|| (this._dimension.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dimension.Entity = null;
						previousValue.vehicles.Remove(this);
					}
					this._dimension.Entity = value;
					if ((value != null))
					{
						value.vehicles.Add(this);
						this._dimensionsid = value.dimensionsid;
					}
					else
					{
						this._dimensionsid = default(int);
					}
					this.SendPropertyChanged("dimension");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="feature_vehicle", Storage="_feature", ThisKey="featuresid", OtherKey="featuresid", IsForeignKey=true)]
		public feature feature
		{
			get
			{
				return this._feature.Entity;
			}
			set
			{
				feature previousValue = this._feature.Entity;
				if (((previousValue != value) 
							|| (this._feature.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._feature.Entity = null;
						previousValue.vehicles.Remove(this);
					}
					this._feature.Entity = value;
					if ((value != null))
					{
						value.vehicles.Add(this);
						this._featuresid = value.featuresid;
					}
					else
					{
						this._featuresid = default(int);
					}
					this.SendPropertyChanged("feature");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="fueltype_vehicle", Storage="_fueltype", ThisKey="fueltypeid", OtherKey="fueltypeid", IsForeignKey=true)]
		public fueltype fueltype
		{
			get
			{
				return this._fueltype.Entity;
			}
			set
			{
				fueltype previousValue = this._fueltype.Entity;
				if (((previousValue != value) 
							|| (this._fueltype.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._fueltype.Entity = null;
						previousValue.vehicles.Remove(this);
					}
					this._fueltype.Entity = value;
					if ((value != null))
					{
						value.vehicles.Add(this);
						this._fueltypeid = value.fueltypeid;
					}
					else
					{
						this._fueltypeid = default(int);
					}
					this.SendPropertyChanged("fueltype");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="make_vehicle", Storage="_make", ThisKey="makeid", OtherKey="makeid", IsForeignKey=true)]
		public make make
		{
			get
			{
				return this._make.Entity;
			}
			set
			{
				make previousValue = this._make.Entity;
				if (((previousValue != value) 
							|| (this._make.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._make.Entity = null;
						previousValue.vehicles.Remove(this);
					}
					this._make.Entity = value;
					if ((value != null))
					{
						value.vehicles.Add(this);
						this._makeid = value.makeid;
					}
					else
					{
						this._makeid = default(int);
					}
					this.SendPropertyChanged("make");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="model_vehicle", Storage="_model", ThisKey="modelid", OtherKey="modelid", IsForeignKey=true)]
		public model model
		{
			get
			{
				return this._model.Entity;
			}
			set
			{
				model previousValue = this._model.Entity;
				if (((previousValue != value) 
							|| (this._model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._model.Entity = null;
						previousValue.vehicles.Remove(this);
					}
					this._model.Entity = value;
					if ((value != null))
					{
						value.vehicles.Add(this);
						this._modelid = value.modelid;
					}
					else
					{
						this._modelid = default(int);
					}
					this.SendPropertyChanged("model");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="performance_vehicle", Storage="_performance", ThisKey="performanceid", OtherKey="performanceid", IsForeignKey=true)]
		public performance performance
		{
			get
			{
				return this._performance.Entity;
			}
			set
			{
				performance previousValue = this._performance.Entity;
				if (((previousValue != value) 
							|| (this._performance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._performance.Entity = null;
						previousValue.vehicles.Remove(this);
					}
					this._performance.Entity = value;
					if ((value != null))
					{
						value.vehicles.Add(this);
						this._performanceid = value.performanceid;
					}
					else
					{
						this._performanceid = default(int);
					}
					this.SendPropertyChanged("performance");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="safetydetail_vehicle", Storage="_safetydetail", ThisKey="safetydetailsid", OtherKey="safetydetailsid", IsForeignKey=true)]
		public safetydetail safetydetail
		{
			get
			{
				return this._safetydetail.Entity;
			}
			set
			{
				safetydetail previousValue = this._safetydetail.Entity;
				if (((previousValue != value) 
							|| (this._safetydetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._safetydetail.Entity = null;
						previousValue.vehicles.Remove(this);
					}
					this._safetydetail.Entity = value;
					if ((value != null))
					{
						value.vehicles.Add(this);
						this._safetydetailsid = value.safetydetailsid;
					}
					else
					{
						this._safetydetailsid = default(int);
					}
					this.SendPropertyChanged("safetydetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="transmission_vehicle", Storage="_transmission", ThisKey="transmissionid", OtherKey="transmissionid", IsForeignKey=true)]
		public transmission transmission
		{
			get
			{
				return this._transmission.Entity;
			}
			set
			{
				transmission previousValue = this._transmission.Entity;
				if (((previousValue != value) 
							|| (this._transmission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._transmission.Entity = null;
						previousValue.vehicles.Remove(this);
					}
					this._transmission.Entity = value;
					if ((value != null))
					{
						value.vehicles.Add(this);
						this._transmissionid = value.transmissionid;
					}
					else
					{
						this._transmissionid = default(int);
					}
					this.SendPropertyChanged("transmission");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dealer_vehicle", Storage="_dealer", ThisKey="dealerid", OtherKey="dealerid", IsForeignKey=true)]
		public dealer dealer
		{
			get
			{
				return this._dealer.Entity;
			}
			set
			{
				dealer previousValue = this._dealer.Entity;
				if (((previousValue != value) 
							|| (this._dealer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dealer.Entity = null;
						previousValue.vehicles.Remove(this);
					}
					this._dealer.Entity = value;
					if ((value != null))
					{
						value.vehicles.Add(this);
						this._dealerid = value.dealerid;
					}
					else
					{
						this._dealerid = default(Nullable<int>);
					}
					this.SendPropertyChanged("dealer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_vehicleimages(vehicleimage entity)
		{
			this.SendPropertyChanging();
			entity.vehicle = this;
		}
		
		private void detach_vehicleimages(vehicleimage entity)
		{
			this.SendPropertyChanging();
			entity.vehicle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dealer")]
	public partial class dealer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _dealerid;
		
		private string _name;
		
		private string _address;
		
		private string _postcode;
		
		private System.Nullable<int> _countryid;
		
		private string _coordinates;
		
		private string _website;
		
		private string _logo;
		
		private int _sortorder;
		
		private System.DateTime _datemodified;
		
		private EntitySet<vehicle> _vehicles;
		
		private EntityRef<country> _country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndealeridChanging(int value);
    partial void OndealeridChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnpostcodeChanging(string value);
    partial void OnpostcodeChanged();
    partial void OncountryidChanging(System.Nullable<int> value);
    partial void OncountryidChanged();
    partial void OncoordinatesChanging(string value);
    partial void OncoordinatesChanged();
    partial void OnwebsiteChanging(string value);
    partial void OnwebsiteChanged();
    partial void OnlogoChanging(string value);
    partial void OnlogoChanged();
    partial void OnsortorderChanging(int value);
    partial void OnsortorderChanged();
    partial void OndatemodifiedChanging(System.DateTime value);
    partial void OndatemodifiedChanged();
    #endregion
		
		public dealer()
		{
			this._vehicles = new EntitySet<vehicle>(new Action<vehicle>(this.attach_vehicles), new Action<vehicle>(this.detach_vehicles));
			this._country = default(EntityRef<country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dealerid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int dealerid
		{
			get
			{
				return this._dealerid;
			}
			set
			{
				if ((this._dealerid != value))
				{
					this.OndealeridChanging(value);
					this.SendPropertyChanging();
					this._dealerid = value;
					this.SendPropertyChanged("dealerid");
					this.OndealeridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postcode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string postcode
		{
			get
			{
				return this._postcode;
			}
			set
			{
				if ((this._postcode != value))
				{
					this.OnpostcodeChanging(value);
					this.SendPropertyChanging();
					this._postcode = value;
					this.SendPropertyChanged("postcode");
					this.OnpostcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_countryid", DbType="Int")]
		public System.Nullable<int> countryid
		{
			get
			{
				return this._countryid;
			}
			set
			{
				if ((this._countryid != value))
				{
					if (this._country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncountryidChanging(value);
					this.SendPropertyChanging();
					this._countryid = value;
					this.SendPropertyChanged("countryid");
					this.OncountryidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_coordinates", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string coordinates
		{
			get
			{
				return this._coordinates;
			}
			set
			{
				if ((this._coordinates != value))
				{
					this.OncoordinatesChanging(value);
					this.SendPropertyChanging();
					this._coordinates = value;
					this.SendPropertyChanged("coordinates");
					this.OncoordinatesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_website", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string website
		{
			get
			{
				return this._website;
			}
			set
			{
				if ((this._website != value))
				{
					this.OnwebsiteChanging(value);
					this.SendPropertyChanging();
					this._website = value;
					this.SendPropertyChanged("website");
					this.OnwebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logo", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string logo
		{
			get
			{
				return this._logo;
			}
			set
			{
				if ((this._logo != value))
				{
					this.OnlogoChanging(value);
					this.SendPropertyChanging();
					this._logo = value;
					this.SendPropertyChanged("logo");
					this.OnlogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sortorder", DbType="Int NOT NULL")]
		public int sortorder
		{
			get
			{
				return this._sortorder;
			}
			set
			{
				if ((this._sortorder != value))
				{
					this.OnsortorderChanging(value);
					this.SendPropertyChanging();
					this._sortorder = value;
					this.SendPropertyChanged("sortorder");
					this.OnsortorderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_datemodified", DbType="DateTime NOT NULL")]
		public System.DateTime datemodified
		{
			get
			{
				return this._datemodified;
			}
			set
			{
				if ((this._datemodified != value))
				{
					this.OndatemodifiedChanging(value);
					this.SendPropertyChanging();
					this._datemodified = value;
					this.SendPropertyChanged("datemodified");
					this.OndatemodifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dealer_vehicle", Storage="_vehicles", ThisKey="dealerid", OtherKey="dealerid")]
		public EntitySet<vehicle> vehicles
		{
			get
			{
				return this._vehicles;
			}
			set
			{
				this._vehicles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="country_dealer", Storage="_country", ThisKey="countryid", OtherKey="countryid", IsForeignKey=true)]
		public country country
		{
			get
			{
				return this._country.Entity;
			}
			set
			{
				country previousValue = this._country.Entity;
				if (((previousValue != value) 
							|| (this._country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._country.Entity = null;
						previousValue.dealers.Remove(this);
					}
					this._country.Entity = value;
					if ((value != null))
					{
						value.dealers.Add(this);
						this._countryid = value.countryid;
					}
					else
					{
						this._countryid = default(Nullable<int>);
					}
					this.SendPropertyChanged("country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_vehicles(vehicle entity)
		{
			this.SendPropertyChanging();
			entity.dealer = this;
		}
		
		private void detach_vehicles(vehicle entity)
		{
			this.SendPropertyChanging();
			entity.dealer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.country")]
	public partial class country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _countryid;
		
		private string _code;
		
		private string _name;
		
		private EntitySet<dealer> _dealers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncountryidChanging(int value);
    partial void OncountryidChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public country()
		{
			this._dealers = new EntitySet<dealer>(new Action<dealer>(this.attach_dealers), new Action<dealer>(this.detach_dealers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_countryid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int countryid
		{
			get
			{
				return this._countryid;
			}
			set
			{
				if ((this._countryid != value))
				{
					this.OncountryidChanging(value);
					this.SendPropertyChanging();
					this._countryid = value;
					this.SendPropertyChanged("countryid");
					this.OncountryidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="country_dealer", Storage="_dealers", ThisKey="countryid", OtherKey="countryid")]
		public EntitySet<dealer> dealers
		{
			get
			{
				return this._dealers;
			}
			set
			{
				this._dealers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_dealers(dealer entity)
		{
			this.SendPropertyChanging();
			entity.country = this;
		}
		
		private void detach_dealers(dealer entity)
		{
			this.SendPropertyChanging();
			entity.country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.geolookup")]
	public partial class geolookup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _lookupid;
		
		private string _postalcode;
		
		private string _coordinates;
		
		private string _countrycode;
		
		private System.DateTime _datefetched;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnlookupidChanging(int value);
    partial void OnlookupidChanged();
    partial void OnpostalcodeChanging(string value);
    partial void OnpostalcodeChanged();
    partial void OncoordinatesChanging(string value);
    partial void OncoordinatesChanged();
    partial void OncountrycodeChanging(string value);
    partial void OncountrycodeChanged();
    partial void OndatefetchedChanging(System.DateTime value);
    partial void OndatefetchedChanged();
    #endregion
		
		public geolookup()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lookupid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int lookupid
		{
			get
			{
				return this._lookupid;
			}
			set
			{
				if ((this._lookupid != value))
				{
					this.OnlookupidChanging(value);
					this.SendPropertyChanging();
					this._lookupid = value;
					this.SendPropertyChanged("lookupid");
					this.OnlookupidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postalcode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string postalcode
		{
			get
			{
				return this._postalcode;
			}
			set
			{
				if ((this._postalcode != value))
				{
					this.OnpostalcodeChanging(value);
					this.SendPropertyChanging();
					this._postalcode = value;
					this.SendPropertyChanged("postalcode");
					this.OnpostalcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_coordinates", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string coordinates
		{
			get
			{
				return this._coordinates;
			}
			set
			{
				if ((this._coordinates != value))
				{
					this.OncoordinatesChanging(value);
					this.SendPropertyChanging();
					this._coordinates = value;
					this.SendPropertyChanged("coordinates");
					this.OncoordinatesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_countrycode", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string countrycode
		{
			get
			{
				return this._countrycode;
			}
			set
			{
				if ((this._countrycode != value))
				{
					this.OncountrycodeChanging(value);
					this.SendPropertyChanging();
					this._countrycode = value;
					this.SendPropertyChanged("countrycode");
					this.OncountrycodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_datefetched", DbType="DateTime NOT NULL")]
		public System.DateTime datefetched
		{
			get
			{
				return this._datefetched;
			}
			set
			{
				if ((this._datefetched != value))
				{
					this.OndatefetchedChanging(value);
					this.SendPropertyChanging();
					this._datefetched = value;
					this.SendPropertyChanged("datefetched");
					this.OndatefetchedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.searchtray")]
	public partial class searchtray : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _searchid;
		
		private string _sqlstring;
		
		private int _resultcount;
		
		private System.DateTime _daterun;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsearchidChanging(int value);
    partial void OnsearchidChanged();
    partial void OnsqlstringChanging(string value);
    partial void OnsqlstringChanged();
    partial void OnresultcountChanging(int value);
    partial void OnresultcountChanged();
    partial void OndaterunChanging(System.DateTime value);
    partial void OndaterunChanged();
    #endregion
		
		public searchtray()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_searchid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int searchid
		{
			get
			{
				return this._searchid;
			}
			set
			{
				if ((this._searchid != value))
				{
					this.OnsearchidChanging(value);
					this.SendPropertyChanging();
					this._searchid = value;
					this.SendPropertyChanged("searchid");
					this.OnsearchidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sqlstring", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string sqlstring
		{
			get
			{
				return this._sqlstring;
			}
			set
			{
				if ((this._sqlstring != value))
				{
					this.OnsqlstringChanging(value);
					this.SendPropertyChanging();
					this._sqlstring = value;
					this.SendPropertyChanged("sqlstring");
					this.OnsqlstringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_resultcount", DbType="Int NOT NULL")]
		public int resultcount
		{
			get
			{
				return this._resultcount;
			}
			set
			{
				if ((this._resultcount != value))
				{
					this.OnresultcountChanging(value);
					this.SendPropertyChanging();
					this._resultcount = value;
					this.SendPropertyChanged("resultcount");
					this.OnresultcountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_daterun", DbType="DateTime NOT NULL")]
		public System.DateTime daterun
		{
			get
			{
				return this._daterun;
			}
			set
			{
				if ((this._daterun != value))
				{
					this.OndaterunChanging(value);
					this.SendPropertyChanging();
					this._daterun = value;
					this.SendPropertyChanged("daterun");
					this.OndaterunChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.userenquiry")]
	public partial class userenquiry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _enquiryid;
		
		private int _useraccountid;
		
		private string _subject;
		
		private string _message;
		
		private System.DateTime _datesubmitted;
		
		private EntityRef<useraccount> _useraccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnenquiryidChanging(int value);
    partial void OnenquiryidChanged();
    partial void OnuseraccountidChanging(int value);
    partial void OnuseraccountidChanged();
    partial void OnsubjectChanging(string value);
    partial void OnsubjectChanged();
    partial void OnmessageChanging(string value);
    partial void OnmessageChanged();
    partial void OndatesubmittedChanging(System.DateTime value);
    partial void OndatesubmittedChanged();
    #endregion
		
		public userenquiry()
		{
			this._useraccount = default(EntityRef<useraccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_enquiryid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int enquiryid
		{
			get
			{
				return this._enquiryid;
			}
			set
			{
				if ((this._enquiryid != value))
				{
					this.OnenquiryidChanging(value);
					this.SendPropertyChanging();
					this._enquiryid = value;
					this.SendPropertyChanged("enquiryid");
					this.OnenquiryidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_useraccountid", DbType="Int NOT NULL")]
		public int useraccountid
		{
			get
			{
				return this._useraccountid;
			}
			set
			{
				if ((this._useraccountid != value))
				{
					if (this._useraccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuseraccountidChanging(value);
					this.SendPropertyChanging();
					this._useraccountid = value;
					this.SendPropertyChanged("useraccountid");
					this.OnuseraccountidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string subject
		{
			get
			{
				return this._subject;
			}
			set
			{
				if ((this._subject != value))
				{
					this.OnsubjectChanging(value);
					this.SendPropertyChanging();
					this._subject = value;
					this.SendPropertyChanged("subject");
					this.OnsubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_message", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string message
		{
			get
			{
				return this._message;
			}
			set
			{
				if ((this._message != value))
				{
					this.OnmessageChanging(value);
					this.SendPropertyChanging();
					this._message = value;
					this.SendPropertyChanged("message");
					this.OnmessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_datesubmitted", DbType="DateTime NOT NULL")]
		public System.DateTime datesubmitted
		{
			get
			{
				return this._datesubmitted;
			}
			set
			{
				if ((this._datesubmitted != value))
				{
					this.OndatesubmittedChanging(value);
					this.SendPropertyChanging();
					this._datesubmitted = value;
					this.SendPropertyChanged("datesubmitted");
					this.OndatesubmittedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="useraccount_userenquiry", Storage="_useraccount", ThisKey="useraccountid", OtherKey="useraccountid", IsForeignKey=true)]
		public useraccount useraccount
		{
			get
			{
				return this._useraccount.Entity;
			}
			set
			{
				useraccount previousValue = this._useraccount.Entity;
				if (((previousValue != value) 
							|| (this._useraccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._useraccount.Entity = null;
						previousValue.userenquiries.Remove(this);
					}
					this._useraccount.Entity = value;
					if ((value != null))
					{
						value.userenquiries.Add(this);
						this._useraccountid = value.useraccountid;
					}
					else
					{
						this._useraccountid = default(int);
					}
					this.SendPropertyChanged("useraccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.useraccount")]
	public partial class useraccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _useraccountid;
		
		private int _usergroupid;
		
		private string _firstname;
		
		private string _lastname;
		
		private string _email;
		
		private string _telephone;
		
		private string _password;
		
		private System.DateTime _datelastloggedin;
		
		private int _logincount;
		
		private string _securitykey;
		
		private bool _enabled;
		
		private System.DateTime _datecreated;
		
		private EntitySet<userenquiry> _userenquiries;
		
		private EntityRef<usergroup> _usergroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuseraccountidChanging(int value);
    partial void OnuseraccountidChanged();
    partial void OnusergroupidChanging(int value);
    partial void OnusergroupidChanged();
    partial void OnfirstnameChanging(string value);
    partial void OnfirstnameChanged();
    partial void OnlastnameChanging(string value);
    partial void OnlastnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OntelephoneChanging(string value);
    partial void OntelephoneChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OndatelastloggedinChanging(System.DateTime value);
    partial void OndatelastloggedinChanged();
    partial void OnlogincountChanging(int value);
    partial void OnlogincountChanged();
    partial void OnsecuritykeyChanging(string value);
    partial void OnsecuritykeyChanged();
    partial void OnenabledChanging(bool value);
    partial void OnenabledChanged();
    partial void OndatecreatedChanging(System.DateTime value);
    partial void OndatecreatedChanged();
    #endregion
		
		public useraccount()
		{
			this._userenquiries = new EntitySet<userenquiry>(new Action<userenquiry>(this.attach_userenquiries), new Action<userenquiry>(this.detach_userenquiries));
			this._usergroup = default(EntityRef<usergroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_useraccountid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int useraccountid
		{
			get
			{
				return this._useraccountid;
			}
			set
			{
				if ((this._useraccountid != value))
				{
					this.OnuseraccountidChanging(value);
					this.SendPropertyChanging();
					this._useraccountid = value;
					this.SendPropertyChanged("useraccountid");
					this.OnuseraccountidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usergroupid", DbType="Int NOT NULL")]
		public int usergroupid
		{
			get
			{
				return this._usergroupid;
			}
			set
			{
				if ((this._usergroupid != value))
				{
					if (this._usergroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnusergroupidChanging(value);
					this.SendPropertyChanging();
					this._usergroupid = value;
					this.SendPropertyChanged("usergroupid");
					this.OnusergroupidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string firstname
		{
			get
			{
				return this._firstname;
			}
			set
			{
				if ((this._firstname != value))
				{
					this.OnfirstnameChanging(value);
					this.SendPropertyChanging();
					this._firstname = value;
					this.SendPropertyChanged("firstname");
					this.OnfirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string lastname
		{
			get
			{
				return this._lastname;
			}
			set
			{
				if ((this._lastname != value))
				{
					this.OnlastnameChanging(value);
					this.SendPropertyChanging();
					this._lastname = value;
					this.SendPropertyChanged("lastname");
					this.OnlastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_telephone", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string telephone
		{
			get
			{
				return this._telephone;
			}
			set
			{
				if ((this._telephone != value))
				{
					this.OntelephoneChanging(value);
					this.SendPropertyChanging();
					this._telephone = value;
					this.SendPropertyChanged("telephone");
					this.OntelephoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_datelastloggedin", DbType="DateTime NOT NULL")]
		public System.DateTime datelastloggedin
		{
			get
			{
				return this._datelastloggedin;
			}
			set
			{
				if ((this._datelastloggedin != value))
				{
					this.OndatelastloggedinChanging(value);
					this.SendPropertyChanging();
					this._datelastloggedin = value;
					this.SendPropertyChanged("datelastloggedin");
					this.OndatelastloggedinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logincount", DbType="Int NOT NULL")]
		public int logincount
		{
			get
			{
				return this._logincount;
			}
			set
			{
				if ((this._logincount != value))
				{
					this.OnlogincountChanging(value);
					this.SendPropertyChanging();
					this._logincount = value;
					this.SendPropertyChanged("logincount");
					this.OnlogincountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_securitykey", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string securitykey
		{
			get
			{
				return this._securitykey;
			}
			set
			{
				if ((this._securitykey != value))
				{
					this.OnsecuritykeyChanging(value);
					this.SendPropertyChanging();
					this._securitykey = value;
					this.SendPropertyChanged("securitykey");
					this.OnsecuritykeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_enabled", DbType="Bit NOT NULL")]
		public bool enabled
		{
			get
			{
				return this._enabled;
			}
			set
			{
				if ((this._enabled != value))
				{
					this.OnenabledChanging(value);
					this.SendPropertyChanging();
					this._enabled = value;
					this.SendPropertyChanged("enabled");
					this.OnenabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_datecreated", DbType="DateTime NOT NULL")]
		public System.DateTime datecreated
		{
			get
			{
				return this._datecreated;
			}
			set
			{
				if ((this._datecreated != value))
				{
					this.OndatecreatedChanging(value);
					this.SendPropertyChanging();
					this._datecreated = value;
					this.SendPropertyChanged("datecreated");
					this.OndatecreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="useraccount_userenquiry", Storage="_userenquiries", ThisKey="useraccountid", OtherKey="useraccountid")]
		public EntitySet<userenquiry> userenquiries
		{
			get
			{
				return this._userenquiries;
			}
			set
			{
				this._userenquiries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="usergroup_useraccount", Storage="_usergroup", ThisKey="usergroupid", OtherKey="usergroupid", IsForeignKey=true)]
		public usergroup usergroup
		{
			get
			{
				return this._usergroup.Entity;
			}
			set
			{
				usergroup previousValue = this._usergroup.Entity;
				if (((previousValue != value) 
							|| (this._usergroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._usergroup.Entity = null;
						previousValue.useraccounts.Remove(this);
					}
					this._usergroup.Entity = value;
					if ((value != null))
					{
						value.useraccounts.Add(this);
						this._usergroupid = value.usergroupid;
					}
					else
					{
						this._usergroupid = default(int);
					}
					this.SendPropertyChanged("usergroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_userenquiries(userenquiry entity)
		{
			this.SendPropertyChanging();
			entity.useraccount = this;
		}
		
		private void detach_userenquiries(userenquiry entity)
		{
			this.SendPropertyChanging();
			entity.useraccount = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.smscarrier")]
	public partial class smscarrier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _smscarrierid;
		
		private string _carrier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsmscarrieridChanging(int value);
    partial void OnsmscarrieridChanged();
    partial void OncarrierChanging(string value);
    partial void OncarrierChanged();
    #endregion
		
		public smscarrier()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_smscarrierid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int smscarrierid
		{
			get
			{
				return this._smscarrierid;
			}
			set
			{
				if ((this._smscarrierid != value))
				{
					this.OnsmscarrieridChanging(value);
					this.SendPropertyChanging();
					this._smscarrierid = value;
					this.SendPropertyChanged("smscarrierid");
					this.OnsmscarrieridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_carrier", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string carrier
		{
			get
			{
				return this._carrier;
			}
			set
			{
				if ((this._carrier != value))
				{
					this.OncarrierChanging(value);
					this.SendPropertyChanging();
					this._carrier = value;
					this.SendPropertyChanged("carrier");
					this.OncarrierChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
